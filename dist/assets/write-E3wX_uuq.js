import{d as t,o as e,c,a as p}from"./index-DEsTUIAV.js";const r={class:"markdown-body"},s=p("<h1>编写规则</h1><p>通过控制公共部分，方便统一、复用代码，提高效率。</p><h2>说明</h2><blockquote><p>规则：不允许私自修改全局配置及公共内容，如vite、eslint、公共组件、公共方法、状态管理、hooks等等；有需求需与负责人进行沟通。</p></blockquote><blockquote><p>规则：不允许私自 增加、删除、修改 packages中的组件包；有需求需与负责人进行沟通。</p></blockquote><blockquote><p>规则：禁止直接引入js包，如在html中直接引入&lt;script src=“/js/cry.js”&gt;&lt;/script&gt;。因为是注入到window上面，重构的时候不好判断出来源。</p></blockquote><blockquote><p>规则：不允许私自调整localStorage中的内容；有需求需与负责人进行沟通。</p></blockquote><blockquote><p>规则：开发人员仅能够开发单个页面，涉及到多个页面共用的内容需要与负责人进行沟通。</p></blockquote><blockquote><p>规则：代码来源要清晰，禁止使用如unplugin-auto-import/vite等自动引入来源的插件；<br> 原因：<br> 代码来源要清楚，方便阅读及查找。</p></blockquote><blockquote><p>规则：具体页面应该放置于单独的文件夹中，所使用的方法、hook、component等均应放置在对应的文件夹中，类似于套娃一样，有清晰的层级关系，这样可读性较强；</p></blockquote><blockquote><p>规则：系统中多次使用到的列表数据或者状态，在入口处请求好，处理好，放在状态管理里，或者封装为hook，或者封装为业务组件<br> 原因：<br> 方便共用，方便统一修改。<br> 举例：<br> 例如用户所属部门这种list，在很多页面的搜索条件中都有用到，最好在系统的入口请求和处理，然后放在状态管理里，后续不需要每次都做处理。必要时，也可处理为hook或者业务组件，方便调用。</p></blockquote>",11),l=[s],a={},i="",q=t({__name:"write",setup(k,{expose:o}){return o({frontmatter:{},excerpt:void 0}),(n,b)=>(e(),c("div",r,l))}});export{q as default,i as excerpt,a as frontmatter};
