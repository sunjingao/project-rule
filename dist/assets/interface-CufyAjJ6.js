import{d as o,o as t,c as r,a as c}from"./index-DEsTUIAV.js";const b={class:"markdown-body"},l=c("<h1>接口规范</h1><p>后端同事接口定义的时候可能有纰漏，必要时候可以沟通调整</p><h2>说明</h2><blockquote><p>名称与格式统一<br> 规则：相同的含义，在上传和接收处的名字和格式应该一样<br> 原因：<br> 如<br> 前端接收到的图表尺寸叫size，但是通过接口上传的字段叫做show_size，前端还要做转化。意义不明确。<br> 上传的年龄字段，有的叫age，有的叫ages，复制时容易错误。<br> 上传城市代码，有的格式为codes: code1,code2,code3，有的则为codes: [code1, code2, code3]，尽量统一起来，方便前端统一处理。<br> 如上传时涉及到时间，应该统一为YYYY-MM-DD HH:mm:ss的格式，不应该存在既有YYYY-MM-DD HH:mm:ss的格式，又有YYYY-MM-DD的格式，要多处理。<br> 比如分页查询，返回的列表数据数组不要有叫records的，有叫rows的，前端还要特殊处理。</p></blockquote><blockquote><p>字段名称易于使用<br> 规则：返回的字段需要与组件库的字段相对应<br> 原因：<br> 如果不对应，前端还需要做转化，有多余的工作量，以下是ant-design-vue中常使用且字段名容易混淆的字段名<br> cascader：label、value、children<br> select：label、value<br> tree：title、key、children</p></blockquote><blockquote><p>类型准确 规则：如果只有是或否两个状态，就应该为boolean值 原因：<br> 比如是否发送发票，就两个状态，那就应该是boolean类型，逻辑也清楚。前端使用checkbox可以直接对应，如果使用1、0这种数据，前端还要特殊处理下。</p></blockquote><blockquote><p>上传数据参数最少化 规则：可以直接通过token获取到的数据，不要要求在接口中上传 原因：<br> 如有些接口设计时，需要上传用户信息数据，这些数据后端是可以通过token获取的。如果接口中有需要，那么前端可能需要调用接口来获取，增加了工作量。<br> 并且，后端通过token获取，也不用考虑时效等问题，比如，是否在其他端更新了数据，导致发送的数据不准确。</p></blockquote><blockquote><p>无数据<br> 规则：number、boolean，string，object为空时返回null，数组为空时返回[]<br> 原因：<br> 如数据，如果无数据的时候可能返回null，可能为undefined，可能为[]，前端就会多做一些处理，也不符合逻辑</p></blockquote><blockquote><p>文档清晰<br> 规则：文档要清晰全面<br> 原因：<br> 要写清楚每种情况的含义，如多个内容的关系用relation字段来表示，为1时是且，为2时是或；那么只有一个内容的时候呢？也要把0写上。</p></blockquote><blockquote><p>金额处理<br> 规则：前端上传金额的时候应以分为单位，后端返回的时候应该统一，也应全是分<br> 原因：<br> 防止二进制导致精度丢失。</p></blockquote>",10),n=[l],u={},k="",i=o({__name:"interface",setup(s,{expose:e}){return e({frontmatter:{},excerpt:void 0}),(a,d)=>(t(),r("div",b,n))}});export{i as default,k as excerpt,u as frontmatter};
