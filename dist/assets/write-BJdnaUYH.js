import{d as t,o as e,c,a as p}from"./index-B4qzi52p.js";const l={class:"markdown-body"},r=p("<h1>编写规则</h1><p>通过控制公共部分，方便统一、复用代码，提高效率。</p><h2>说明</h2><blockquote><p>规则：文件夹及文件名称为单数<br> 原因：<br> css这种文件夹，无法写成复数，所以统一使用单数即可。</p></blockquote><blockquote><p>规则：名字为多个字符时，应通过-区分，如my-file<br> 原因：<br> 在有些自动化部署平台上，文件名称不区分大小写，可能会有问题。</p></blockquote><blockquote><p>规则：不允许私自修改全局配置及公共内容，如vite、eslint、公共组件、公共方法、状态管理、hooks等等；有需求需与负责人进行沟通。</p></blockquote><blockquote><p>规则：不允许私自 增加、删除、修改 packages中的组件包；有需求需与负责人进行沟通。</p></blockquote><blockquote><p>规则：禁止直接引入js包，如在html中直接引入&lt;script src=“/js/cry.js”&gt;&lt;/script&gt;。因为是注入到window上面，重构的时候不好判断出来源。</p></blockquote><blockquote><p>规则：不允许私自调整localStorage中的内容；有需求需与负责人进行沟通。</p></blockquote><blockquote><p>规则：开发人员仅能够开发单个页面，涉及到多个页面共用的内容需要与负责人进行沟通。</p></blockquote><blockquote><p>规则：代码来源要清晰，禁止使用如unplugin-auto-import/vite等自动引入来源的插件；<br> 原因：<br> 代码来源要清楚，方便阅读及查找。</p></blockquote><blockquote><p>规则：公共的内容必须要写好注释。如公共组件，要有对应的md文件进行字段说明及使用举例、公共方法的注释要写清楚。<br> 原因：<br> 方便维护。</p></blockquote><blockquote><p>规则：具体页面应该放置于单独的文件夹中，所使用的方法、hook、component等均应放置在对应的文件夹中，类似于套娃一样，有清晰的层级关系，这样可读性较强；</p></blockquote>",13),s=[r],a={},q="",i=t({__name:"write",setup(b,{expose:o}){return o({frontmatter:{},excerpt:void 0}),(u,k)=>(e(),c("div",l,s))}});export{i as default,q as excerpt,a as frontmatter};
